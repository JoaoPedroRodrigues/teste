{"name":"Teste","tagline":"","body":"<!-- baseado em: https://github.com/go-martini/martini -->\r\n\r\n# boxJS\r\n\r\nO boxJS é um container de execução JavaScript para servidores Web, \r\nou seja, é uma plataforma Server-Side JavaScript(SSJS).\r\n\r\n\r\n## Primeiros Passos\r\n\r\nDepois de [configurar o seu ambiente para o funcionamento do boxJS](#configurando-o-ambiente-de-desenvolvimento), já podemos criar \r\nnosso primeiro arquivo javascript que será executado pelo servidor. Podemos chamá-lo de 'hello.js' e escreveremos apenas o seguinte código nele:\r\n\r\n~~~ javascript\r\n\r\nexports = {\r\n\tworld: function (params,request,response) {\r\n\t\tresponse.write(\"<html><body> <h1>Hello world!</h1> </body></html>\");\r\n\t}\r\n}\r\n\r\n~~~\r\n\r\n\r\nAgora, já podemos acessar nossa primeira página fornecida via boxJS através da seguinte URL `localhost:8080/<nome_do_projeto>/boxjs/hello/world`.\r\n\r\n![Browser](browser_com_primeira_pagina.png)\r\n\r\n## Precisando de Ajuda?\r\n\r\nEnvie-nos um [e-mail](mailto:suporteboxjs@softbox.com.br)\r\n\r\nFaça perguntas no Stackoverflow usando a [tag boxJS](http://pt.stackoverflow.com/questions/tagged/boxjs)\r\n\r\n\r\n## Vantagens\r\n\r\n* SSJS baseado em threads\r\n* Performático\r\n* Fácil aprendizado\r\n* Simples de usar\r\n* Bom conjunto de APIs para utilização imediata\r\n\r\n\r\n## Sumário\r\n\r\n\r\n* [Configurando o ambiente de desenvolvimento](#configurando-o-ambiente-de-desenvolvimento)\r\n* [Configurando o `config.js`](#configurando-o-configjs)\r\n* [Configurando rotas](#configurando-rotas)\r\n* [Utilizando o `security.js`](#utilizando-o-securityjs)\r\n* [MongoDB](#mongodb)\r\n  * [Preparando para usar o MongoDB](#preparando-para-usar-o-mongodb)\r\n  * [Usando o MongoDB](#usando-o-mongodb)\r\n\r\n## Configurando o ambiente de desenvolvimento\r\n\r\n\r\nPara começarmos a trabalhar com o boxJS precisamos, antes de mais nada, fazer algumas configurações no nosso ambiente de \r\ndesenvolvimento. Começamos criando um Dynamic Web Project:\r\n\r\n![Criando projeto](tutorial_primeiro_projeto/criando_projeto1.png)\r\n\r\n![Criando projeto](tutorial_primeiro_projeto/criando_projeto2.png)\r\n\r\nNeste passo é importante checar se o Tomcat esta selecionado e clicar para ir para o próximo, ao invés de finalizar, conforme \r\nimagem abaixo:\r\n\r\n![Configuracao novo projeto](tutorial_primeiro_projeto/criando_projeto3.png)\r\n\r\nNesta tela não há necessidade de modificar nada, apenas siga para a próxima.\r\n\r\n![Configuracao novo projeto](tutorial_primeiro_projeto/criando_projeto4.png)\r\n\r\nNesta parte é importante marcar a opção de gerar o web.xml automaticamente, conforme imagem abaixo:\r\n\r\n![Configuracao novo projeto](tutorial_primeiro_projeto/criando_projeto5.png)\r\n\r\nPronto, temos nosso primeiro projeto criado, porém o boxJS ainda não funcionará, precisamos fazer apenas mais uma configuração.\r\n\r\nAdicionaremos à pasta `lib`, que está dentro da pasta `WEB-INF`, que, por sua vez, está dentro da pasta `WebContent`, o [jar do boxJS](https://github.com/JoaoPedroRodrigues/teste/raw/master/boxjs.jar),\r\ndo [Tomcat](http://www.java2s.com/Code/Jar/t/Downloadtomcatjdbcjar.htm) e da [api de servlet](http://www.java2s.com/Code/Jar/s/Downloadservletapi30jar.htm), conforme imagem abaixo:\r\n\r\n![Jars na pasta lib](tutorial_primeiro_projeto/criando_projeto6.png)\r\n\r\n\r\n\r\nFeito isso, basta que adicionemos nosso novo projeto ao Tomcat, conforme as imagens abaixo:\r\n\r\n![Adicionando projeto ao servidor](tutorial_primeiro_projeto/criando_projeto7.png)\r\n\r\n![Adicionando projeto ao servidor](tutorial_primeiro_projeto/criando_projeto8.png)\r\n\r\nÉ importante lembrar que todos os arquivos `.js` devem estar dentro da pasta boxjs ou algum subdiretório, conforme a \r\nimagem abaixo.\r\n\r\n\r\n![Hello World](hello_dentro_boxjs.png)\r\n\r\n\r\nPronto, nosso ambiente já está completamente pronto para funcionar o boxJS!\r\n\r\n\r\n## Configurando o `config.js`\r\n\r\nVoce pode ter reparado que o servidor encontrou alguns erros ao subir nosso primeiro projeto, isso aconteceu pois\r\ntoda vez que o boxJS é instanciado ele procura pelo arquivo `config.js` dentro da pasta `boxjs`, este arquivo\r\ncontém configurações a serem executadas assim que o box é instanciado.\r\n\r\nUm exemplo do que é possível fazer com essas configurações é a inclusão de módulos, que devem seguir o seguinte\r\npadrão.\r\n\r\n~~~ javascript\r\n\r\nvar config = {\r\n\tmodules: [\"routes\", \"mongodb\", \"io\", \"binary\", \"jsrender\",\"init\"]\r\n};\r\n\r\n~~~\r\n\r\n\r\nPara alguns módulos, como por exemplo o mongodb, é necessário que se inclua mais algumas configurações. No caso\r\ndo mongo, é necessário citar o link com o banco, o que deve deixar nosso `config.js` da seguinte forma:\r\n\r\n\r\n~~~ javascript\r\n\r\nvar config = {\r\n\tmodules: [\"routes\", \"mongodb\", \"io\", \"binary\", \"jsrender\",\"init\"],\r\n\t\r\n\tmongodb: {\r\n\t\tdatasource: \"java:comp/env/mongo/MongoDSFactory\"\r\n\t}\t\r\n};\r\n\r\n~~~\r\n\r\nOBS: Além disso, para utilizarmos o mongo é necessário criar o datasource no context.xml, isso pode ser feito \r\nadicionando a seguite tag (com suas devidas alterações) ao context.xml do Tomcat que rodará seu projeto.\r\n\r\n~~~ xml\r\n<Resource name=\"mongo/MongoDSFactory\" auth=\"Container\"\r\ntype=\"com.mongodb.MongoClient\" factory=\"softbox.boxjs.MongoDSFactory\"\r\nsingleton=\"false\" user=\"\" pass=\"\" uri=\"mongodb://localhost:27017/nome_do_banco\"/>\r\n\r\n~~~\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## Configurando rotas\r\n\r\nAlém das páginas html que estão na pasta `WebContent` que são fornecidas normalmente pelo Tomcat, já sabemos que é possivel\r\nfornecer páginas através de comandos Javascript desde que os arquivos com estes comandos estejam dentro da pasta `boxjs`. \r\nOutra possibilidade que o boxJS traz é o uso de rotas, essas rotas podem ser definidas no arquivo `config.js`, do qual [já \r\nfalamos anteriormente](#configurando-o-configjs), ou em um outro arquivo qualquer, desde que este seja adicionado como \r\nmódulo no `config.js`. Consideramos o segundo modo o mais correto e é ele que pode ser encontrado no exemplo abaixo:\r\n\r\nPrimeiro devemos criar nosso arquivo `config.js`, nele incluiremos apenas o nosso módulo `routes`:\r\n\r\n~~~ javascript\r\n\r\nvar config = {\r\n\tmodules: [\"routes\"]\r\n};\r\n\r\n~~~\r\n\r\n![Configjs](img-config-js-na-pasta.png)\r\n\r\n\r\nAgora podemos criar o arquivo `routes.js` que irá conter nossas rotas:\r\n\r\n\r\n~~~ javascript\r\n\r\nRouter.add( 'hello', 'actions/hello');\r\n\r\nRouter.add( 'bye', 'actions/bye');\r\n\r\n~~~\r\n\r\n![Routesjs](img-routes-js-na-pasta.png)\r\n\r\nOs argumentos da função add, usada acima, são, respectivamente, o Url pattern daquela rota e o arquivo JS que responderá às requisições que\r\nchegarem nela (o caminho deste arquivo é apartir da pasta `boxjs`).\r\n\r\n\r\nNo arquivo JavaScript dado como segundo argumento deve ser definido um objeto `exports` que terá como propriedade o que será suportado\r\nno restante da URL, cada uma dessas propriedades é na verdade uma função que lida com a requisição do usuário.\r\n\r\nPara o nosso exemplo, criamos o `hello.js` com o seguinte código:\r\n\r\n~~~ javascript\r\n\r\nexports = {\r\n\tmodern: function (params,request,response) {\r\n\t\tresponse.write(\"<html><body> <h1>Hey route!</h1> </body></html>\");\r\n\t},\r\n\tstd: function (params,request,response) {\r\n\t\tresponse.write(\"<html><body> <h1>Hello route!</h1> </body></html>\");\r\n\t}\r\n}\r\n\r\n~~~\r\n\r\nE o `bye.js` com:\r\n\r\n~~~ javascript\r\n\r\nexports = {\r\n\tstd: function (params,request,response) {\r\n\t\tresponse.write(\"<html><body> <h1>Bye route!</h1> </body></html>\");\r\n\t}\r\n}\r\n\r\n~~~\r\n\r\n![Byeehello](img-bye-e-hello-js-na-pasta.png)\r\n\r\nAgora podemos acessar cada um desses métodos, respectivamente, com as seguintes URL:\r\n\r\n\r\n![UrlRotesBrowser](acessando-url-routes.png)\r\n\r\n\r\n\r\n\r\n## Utilizando o `security.js`\r\n\r\nCaso algum módulo com o nome de `security` seja adicionado ao `config.js`, o boxJS garante que todas as requisições, passem, \r\nprimeiramente, por este módulo, isso possibilita que seja criado algum tipo de restrição de acesso, onde uma certa página só será \r\nfornecida pelo servidor caso as restrições impostas pelo módulo `security` sejam atingidas.\r\n\r\nPor padrão o arquivo security vem conforme [descrito aqui](https://github.com/cneryjr/boxjs/blob/master/boxjs/modules/security.js), ou seja, autorizando todo e qualquer acesso, porém \r\ntornar alguma página inacessível é uma tarefa simples.\r\n\r\nPodemos tornar a página `localhost:8080/helloWorld/boxjs/hello/modern` inacessível fazendo as seguintes alterações ao `security.js` padrão:\r\n\r\n~~~ javascript\r\n\r\nsafe.hasPermissionInThisMethod = function (paramsObject, request, response, methodName) {\r\n\r\n\tif(methodName==\"modern\") {\r\n\t\thttp.response.setStatus(403);\r\n\t\treturn false;\r\n\t}\r\n\t\r\n    return true;\r\n};\r\n\r\n\r\n~~~\r\n\r\nLembramos que o `security.js` que vai junto com o boxJS é apenas um esboço de um módulo de segurança, quem o utiliza tem liberdade para \r\n(e deve) alterar o seu funcionamento.\r\n\r\nOBS: Para pegar um header de uma requisição, basta usar o seguinte método `http.requestJava.getHeader(\"nome-do-header\")`.\r\n\r\n\r\n\r\n## MongoDB\r\n\r\n\r\n### Preparando para usar o MongoDB\r\n\r\nComo citado na parte de [como usar o `config.js`](#configurando-o-configjs), para usarmos o mongoDB o primeiro passo é adicioná-lo aos\r\nmódulos no `config.js` e citar o link com o banco:\r\n\r\n~~~ javascript\r\n\r\nvar config = {\r\n\tmodules: [\"mongodb\"],\r\n\r\n\tmongodb: {\r\n\t\tdatasource: \"java:comp/env/mongo/MongoDSFactory\"\r\n\t}\r\n};\r\n\r\n~~~\r\n\r\n\r\nApós modificar o `config.js` para ter estas configurações, devemos adicionar o datasource ao nosso servidor, isso pode ser feito adicionando\r\na seguinte tag ao context.xml:\r\n\r\n~~~ xml\r\n\r\n<Resource name=\"mongo/MongoDSFactory\" auth=\"Container\"\r\ntype=\"com.mongodb.MongoClient\" factory=\"softbox.boxjs.MongoDSFactory\"\r\nsingleton=\"false\" user=\"\" pass=\"\" uri=\"mongodb://localhost:27017/nome_do_banco\"/>\r\n\r\n~~~\r\n\r\n![DatasourceNoContext](datasource-no-context.png)\r\n\r\n\r\nAgora adicione [o módulo do mongo](https://raw.githubusercontent.com/cneryjr/boxjs/master/boxjs/modules/mongodb.js) a sua pasta `modules`.\r\n\r\n![DatasourceNoContext](mongodb-no-modules.png)\r\n\r\n\r\nFinalmente, adicione o [jar do driver de conexão ao mongo](https://github.com/mongodb/mongo-java-driver/releases/tag/r2.12.3) à pasta `lib` do `WEB-INF` e tudo deve funcionar normalmente.\r\n\r\n\r\n### Usando o MongoDB\r\n\r\nPara usar o MongoDB recomendamos a criação de um módulo `init.js`, com apenas o seguinte código:\r\n\r\n\r\n~~~ javascript\r\n\r\ndb = db || {};\r\n\r\ndb.nome_do_banco = function() {\r\n\treturn db.MongoDB.getDB(\"nome_do_banco\");\r\n}\r\n\r\n~~~\r\n\r\nEsse módulo init deve ser adicionado ao `config.js` e é importante para garantir que não serão criadas múltiplas conexões com o banco, com este passo pronto, basta que,\r\nquando for necessário acessar uma collection, seja utilizado um código semelhante a:\r\n\r\n~~~ javascript\r\n\r\nvar collection = db.nome_do_banco().getCollection(\"nome_da_collection\");\r\n\r\n~~~\r\n\r\nCom uma collection em mãos uma variedade de operações pode ser utilizada:\r\n\r\n* insert(doc) - insere um documento a uma collection\r\n* find(query,fields) - executa a 'query' na collection retornando apenas os campos determinados em 'fields'\r\n* count(query) - conta quantos documentos são compatíveis com 'query', sem carregá-los\r\n* distinct(field, query) - retorna os valores que um determinado campo, 'field', assume, caso haja uma 'query', só retorna os valores distintos para esta 'query'\r\n* remove(query) - remove as emtradas que são compatíveis com 'query'\r\n* update(query,update,options) - atualiza as entradas que são compatíveis com 'query' para o valor 'update', sendo possível utilizar duas configurações opcionais:\r\n  * upsert - caso nenhuma entrada seja compatível com 'query', invés de atualizar, insere uma nova entrada\r\n  * multi - atualiza todas as entradas compatíveis com 'query'\r\n* aggregate - http://docs.mongodb.org/manual/aggregation/\r\n\r\nMais detalhes podem ser vistos no próprio código comentado do módulo do mongo que você adicionou a sua pasta `modules`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}